#!/usr/bin/env bash
set -euo pipefail

# YOURLS unattended installer for modern Ubuntu (22.04/24.04)
# - Installs Nginx, MariaDB, PHP-FPM and required PHP extensions
# - Deploys YOURLS to /var/www/yourls (configurable)
# - Creates DB, user, and YOURLS config.php
# - Configures an Nginx server block with PHP-FPM and YOURLS routing
# - Optional Let's Encrypt TLS
#
# Usage (run as root or with sudo):
#   sudo bash install-yourls-ubuntu.sh \
#     --domain example.com \
#     --db-name yourls \
#     --db-user yourls \
#     --db-pass 'StrongPasswordHere' \
#     --admin-user admin \
#     --admin-pass 'StrongAdminPass' \
#     [--install-dir /var/www/yourls] \
#     [--yourls-version 1.9.2] \
#     [--letsencrypt --email you@example.com]
#
# After completion: browse to http(s)://example.com/admin/ to finish setup.

# Defaults
DOMAIN=""
DB_NAME="yourls"
DB_USER="yourls"
DB_PASS=""
ADMIN_USER="admin"
ADMIN_PASS=""
INSTALL_DIR="/var/www/yourls"
YOURLS_VERSION="1.9.2"
ENABLE_LETSENCRYPT="false"
LETSENCRYPT_EMAIL=""

log() { echo -e "\033[1;32m[+]\033[0m $*"; }
warn() { echo -e "\033[1;33m[!]\033[0m $*"; }
die()  { echo -e "\033[1;31m[x]\033[0m $*"; exit 1; }

need_root() {
  if [[ $(id -u) -ne 0 ]]; then
    die "Please run as root (use sudo)."
  fi
}

parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --domain) DOMAIN="$2"; shift 2;;
      --db-name) DB_NAME="$2"; shift 2;;
      --db-user) DB_USER="$2"; shift 2;;
      --db-pass) DB_PASS="$2"; shift 2;;
      --admin-user) ADMIN_USER="$2"; shift 2;;
      --admin-pass) ADMIN_PASS="$2"; shift 2;;
      --install-dir) INSTALL_DIR="$2"; shift 2;;
      --yourls-version) YOURLS_VERSION="$2"; shift 2;;
      --letsencrypt) ENABLE_LETSENCRYPT="true"; shift;;
      --email) LETSENCRYPT_EMAIL="$2"; shift 2;;
      -h|--help) usage; exit 0;;
      *) die "Unknown argument: $1";;
    esac
  done

  [[ -z "$DOMAIN" ]] && die "--domain is required"
  [[ -z "$DB_PASS" ]] && die "--db-pass is required"
  [[ -z "$ADMIN_PASS" ]] && die "--admin-pass is required"
  if [[ "$ENABLE_LETSENCRYPT" == "true" && -z "$LETSENCRYPT_EMAIL" ]]; then
    die "--email is required when using --letsencrypt"
  fi
}

usage() {
  sed -n '1,80p' "$0" | sed -n '1,80p'
}

install_packages() {
  log "Updating apt and installing required packages"
  apt-get update -y
  DEBIAN_FRONTEND=noninteractive apt-get install -y \
    nginx mariadb-server \
    php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-zip php-cli \
    unzip curl ca-certificates rsync
}

setup_database() {
  log "Creating MariaDB database and user"
  mysql -uroot <<SQL
CREATE DATABASE IF NOT EXISTS \`$DB_NAME\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER IF NOT EXISTS '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASS';
GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'localhost';
FLUSH PRIVILEGES;
SQL
}

fetch_yourls() {
  log "Fetching YOURLS v$YOURLS_VERSION"
  mkdir -p "$INSTALL_DIR"
  cd /tmp
  rm -f yourls.zip
  curl -fsSL -o yourls.zip "https://github.com/YOURLS/YOURLS/archive/refs/tags/$YOURLS_VERSION.zip"
  unzip -q yourls.zip
  rsync -a "YOURLS-$YOURLS_VERSION"/ "$INSTALL_DIR"/
  chown -R www-data:www-data "$INSTALL_DIR"
}

random_cookie_key() {
  # 64 hex chars
  openssl rand -hex 32
}

write_config_php() {
  log "Writing YOURLS user/config.php"
  local site_url="http://$DOMAIN"
  if [[ "$ENABLE_LETSENCRYPT" == "true" ]]; then
    site_url="https://$DOMAIN"
  fi
  local cookie_key
  cookie_key=$(random_cookie_key)

  cat > "$INSTALL_DIR/user/config.php" <<PHP
<?php
// Auto-generated by install-yourls-ubuntu.sh
// See user/config-sample.php for documentation

define( 'YOURLS_DB_USER', '$DB_USER' );
define( 'YOURLS_DB_PASS', '$DB_PASS' );
define( 'YOURLS_DB_NAME', '$DB_NAME' );
define( 'YOURLS_DB_HOST', 'localhost' );
define( 'YOURLS_DB_PREFIX', 'yourls_' );

define( 'YOURLS_SITE', '$site_url' );
define( 'YOURLS_LANG', '' );

define( 'YOURLS_UNIQUE_URLS', true );

define( 'YOURLS_PRIVATE', true );

define( 'YOURLS_COOKIEKEY', '$cookie_key' );

\$yourls_user_passwords = [
  '$ADMIN_USER' => '$ADMIN_PASS',
];

define( 'YOURLS_URL_CONVERT', 36 );

define( 'YOURLS_DEBUG', false );

\$yourls_reserved_URL = [ '' ];
PHP

  chown -R www-data:www-data "$INSTALL_DIR/user"
}

php_fpm_socket() {
  # Find a php-fpm socket path
  local sock
  sock=$(find /run/php -maxdepth 1 -type s -name 'php*-fpm.sock' 2>/dev/null | head -n1 || true)
  if [[ -z "$sock" ]]; then
    # Fallback (may not exist)
    sock="/run/php/php-fpm.sock"
  fi
  echo "$sock"
}

configure_nginx() {
  log "Configuring Nginx server block for $DOMAIN"
  local sock
  sock=$(php_fpm_socket)

  cat > "/etc/nginx/sites-available/yourls-$DOMAIN" <<NGINX
server {
  listen 80;
  server_name $DOMAIN;
  root $INSTALL_DIR;
  index index.php index.html;

  access_log /var/log/nginx/yourls_${DOMAIN}_access.log;
  error_log  /var/log/nginx/yourls_${DOMAIN}_error.log;

  location / {
    try_files $uri $uri/ /yourls-loader.php?$args;
  }

  location ~ \.php$ {
    include snippets/fastcgi-php.conf;
    fastcgi_pass unix:$sock;
  }

  location ~ /\.ht { deny all; }
}
NGINX

  ln -sf "/etc/nginx/sites-available/yourls-$DOMAIN" "/etc/nginx/sites-enabled/yourls-$DOMAIN"
  if [[ -f /etc/nginx/sites-enabled/default ]]; then
    rm -f /etc/nginx/sites-enabled/default
  fi

  nginx -t
  systemctl enable --now nginx
  systemctl reload nginx
}

obtain_cert() {
  if [[ "$ENABLE_LETSENCRYPT" != "true" ]]; then
    return
  fi
  log "Obtaining Let's Encrypt certificate via certbot"
  DEBIAN_FRONTEND=noninteractive apt-get install -y certbot python3-certbot-nginx
  certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos -m "$LETSENCRYPT_EMAIL" --redirect || warn "Certbot failed; continuing without TLS"
}

restart_services() {
  log "Restarting PHP-FPM and Nginx"
  systemctl restart nginx || true
  # Restart any php-fpm service found
  systemctl list-units --type=service | awk '/php.*fpm/ {print $1}' | xargs -r -I{} systemctl restart {}
}

main() {
  need_root
  parse_args "$@"
  install_packages
  setup_database
  fetch_yourls
  write_config_php
  configure_nginx
  obtain_cert
  restart_services

  local proto="http"
  if [[ "$ENABLE_LETSENCRYPT" == "true" ]]; then proto="https"; fi
  log "Installation complete. Visit: ${proto}://$DOMAIN/admin/"
}

main "$@"
